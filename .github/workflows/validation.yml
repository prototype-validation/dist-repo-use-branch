# 有个小缺陷需要解决，fokr端（下游）创建分支时必须同名，否则只有创建时是复制的制定分支，后续目标会被强制改为上游默认分支
# 按照规范，发布分支应当仅限单向推送
name: Validation

# 这里通过主分支的 push 和手动触发器触发，也可以自定义其他触发方式
on:
  workflow_call:
    inputs:
      repository:  # 上游仓库
        required: true
        type: string
      main_branch:  # 上游主分支
        required: true
        type: string
      # cd_path:  # (Github）持续交付路径, 不能以 / 结尾
      #   required: true
      #   type: string
      # cd_branch: # 不能包含 / 等字符
      #   required: true
      #   type: string
      dist_path: # 分发路径, 不能以 / 结尾
        required: true
        type: string
      dist_branch:  # 不能包含 / 等字符
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          fetch-depth: 0  # 确保可以获取所有历史记录，以便合并
          token: ${{ secrets.TOEKN_FOREVER_FULL_WRITE }} # 使用具有完全写入权限的 TOKEN（必须包含 workflows ）

      - name: Set up Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Check if dist_branch exists in the remote
        id: dist_branch-exists
        run: |
          # grep -qE 使用了 -E 参数来启用扩展的正则表达式, 并且使用了 $ 符号来确保匹配的字符串以 main 结尾, 达到精准匹配的目的
          if git ls-remote --heads origin | grep -qE 'refs/heads/${{ inputs.dist_branch }}$'; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            echo "Remote branch ${{ inputs.dist_branch }} exists."
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
            echo "Remote branch ${{ inputs.dist_branch }} does not exist."
          fi
      # - name: Check if cd_branch exists in the remote
      #   id: cd_branch-exists
      #   run: |
      #     # grep -qE 使用了 -E 参数来启用扩展的正则表达式, 并且使用了 $ 符号来确保匹配的字符串以 main 结尾, 达到精准匹配的目的
      #     if git ls-remote --heads origin | grep -qE 'refs/heads/${{ inputs.cd_branch }}$'; then
      #       echo "branch_exists=true" >> $GITHUB_OUTPUT
      #       echo "Remote branch ${{ inputs.cd_branch }} exists."
      #     else
      #       echo "branch_exists=false" >> $GITHUB_OUTPUT
      #       echo "Remote branch ${{ inputs.cd_branch }} does not exist."
      #     fi
      - name: Sync dist_path from main_branch to exists dist_branch
        if: steps.dist_branch-exists.outputs.branch_exists == 'true'
        run: |
          # 主分支需要重复使用, 因此基于临时分支操作
          git checkout -b temp_${{ inputs.main_branch }} ${{ inputs.main_branch }}
          # 创建临时文件夹，如果它不存在的话
          mkdir -p $HOME/tmp
          # 清空临时文件夹的内容
          find $HOME/tmp/ -mindepth 1 -maxdepth 1 -exec rm -rf {} +
          ls -A $HOME/tmp/
          rsync -a --exclude '.git' ${{ inputs.dist_path }}/ $HOME/tmp/
          ls -A $HOME/tmp/
          git checkout ${{ inputs.dist_branch }}
          # 清空所有文件，除了.git目录
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
          rsync -a --exclude '.git' $HOME/tmp/ ./
          find . -path './.git' -prune -o -exec ls -lR {} +
          git add .
          git commit -m "🪂 Sync ${{ inputs.dist_path }} from ${{ inputs.main_branch }} to ${{ inputs.dist_branch }}" || echo "No changes to commit"
          # 删除临时分支
          git branch -D temp_${{ inputs.main_branch }}
      # - name: Sync cd_path from main_branch to exists cd_branch
      #   if: steps.cd_branch-exists.outputs.branch_exists == 'true'
      #   run: |
      #     # 主分支需要重复使用, 因此基于临时分支操作
      #     git checkout -b temp_${{ inputs.main_branch }} ${{ inputs.main_branch }}
      #     # 创建临时文件夹，如果它不存在的话
      #     mkdir -p $HOME/tmp
      #     # 清空临时文件夹的内容
      #     find $HOME/tmp/ -mindepth 1 -maxdepth 1 -exec rm -rf {} +
      #     ls -A $HOME/tmp/
      #     rsync -a --exclude '.git' ${{ inputs.cd_path }}/ $HOME/tmp/
      #     ls -A $HOME/tmp/
      #     git checkout ${{ inputs.cd_branch }}
      #     # 清空所有文件，除了.git目录
      #     find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
      #     rsync -a --exclude '.git' $HOME/tmp/ ./
      #     find . -path './.git' -prune -o -exec ls -lR {} +
      #     git add .
      #     git commit -m "🪂 Sync ${{ inputs.cd_path }} from ${{ inputs.main_branch }} to ${{ inputs.cd_branch }}" || echo "No changes to commit"
      #     # 删除临时分支
      #     git branch -D temp_${{ inputs.main_branch }}
      - name: Init dist_branch from dist_path at main_branch
        if: steps.dist_branch-exists.outputs.branch_exists == 'false'
        run: |
          # 主分支需要重复使用, 因此基于临时分支操作
          git checkout -b temp_${{ inputs.main_branch }} ${{ inputs.main_branch }}
          # 创建临时文件夹，如果它不存在的话
          mkdir -p $HOME/tmp
          # 清空临时文件夹的内容
          find $HOME/tmp/ -mindepth 1 -maxdepth 1 -exec rm -rf {} +
          rsync -a --exclude '.git' ${{ inputs.dist_path }}/ $HOME/tmp/
          # 清空所有文件，除了.git目录
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
          # 创建一个全新的分支, 不基于任何现有的提交
          git checkout --orphan ${{ inputs.dist_branch }}
          rsync -a --exclude '.git' $HOME/tmp/ ./
          git add .
          git commit -m "🪂 Initial ${{ inputs.dist_path }} from ${{ inputs.main_branch }} to ${{ inputs.dist_branch }}"
          # 删除临时分支
          git branch -D temp_${{ inputs.main_branch }}
      # - name: Init cd_branch from cd_path at main_branch
      #   if: steps.cd_branch-exists.outputs.branch_exists == 'false'
      #   run: |
      #     # 主分支需要重复使用, 因此基于临时分支操作
      #     git checkout -b temp_${{ inputs.main_branch }} ${{ inputs.main_branch }}
      #     # 创建临时文件夹，如果它不存在的话
      #     mkdir -p $HOME/tmp
      #     # 清空临时文件夹的内容
      #     find $HOME/tmp/ -mindepth 1 -maxdepth 1 -exec rm -rf {} +
      #     rsync -a --exclude '.git' ${{ inputs.cd_path }}/ $HOME/tmp/
      #     # 清空所有文件，除了.git目录
      #     find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} +
      #     # 创建一个全新的分支, 不基于任何现有的提交
      #     git checkout --orphan ${{ inputs.cd_branch }}
      #     rsync -a --exclude '.git' $HOME/tmp/ ./
      #     git add .
      #     git commit -m "🪂 Initial ${{ inputs.cd_path }} from ${{ inputs.main_branch }} to ${{ inputs.cd_branch }}"
      #     # 删除临时分支
      #     git branch -D temp_${{ inputs.main_branch }}
      - run: |
          git checkout ${{ inputs.dist_branch }}
      - name: Push dist_branch
        id: push_dist_branch
        uses: ad-m/github-push-action@master
        with:
          repository: ${{ inputs.repository }}
          branch: ${{ inputs.dist_branch }}
          force: true
          # force_with_lease: true # 仅在远程分支自上次检出以来没有其他提交的情况下成功
        env:
          github_token: ${{ secrets.TOEKN_FOREVER_FULL_WRITE }} # 使用具有完全写入权限的 TOKEN（必须包含 workflows ）
      # - run: |
      #     git checkout ${{ inputs.cd_branch }}
      # - name: Push cd_branch
      #   id: push_cd_branch
      #   uses: ad-m/github-push-action@master
      #   with:
      #     repository: ${{ inputs.repository }}
      #     branch: ${{ inputs.cd_branch }}
      #     force: true
      #     # force_with_lease: true # 仅在远程分支自上次检出以来没有其他提交的情况下成功
      #   env:
      #     github_token: ${{ secrets.TOEKN_FOREVER_FULL_WRITE }} # 使用具有完全写入权限的 TOKEN（必须包含 workflows ）
