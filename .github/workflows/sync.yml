# refusing to allow a GitHub App to create or update workflow .github/workflows/XXXX.yml without workflows permission
# 遇到这个错误，需要检查三点：
# 1. 仓库设置 Workflow permissions 允许写权限
# 2. 使用的 TOKEN 具有 workflows 权限，如果是组织仓库还需要检查 TOKEN 的作用域
# 3. actions/checkout 也需要使用 workflows 权限的 TOKEN
# -------------------------------------------------------------------
# https://github.com/Soltus

name: sync

on:
  workflow_call:
    inputs:
      target_sync_repo:
        description: "目标（下游）仓库，格式为 owner/repository"
        required: true
        type: string
      target_sync_branch:
        description: "目标（下游）同步分支"
        required: true
        type: string
      upstream_sync_repo:
        description: "上游仓库，默认为 github.repository ，根据实际情况修改"
        type: string
        default: ${{ github.repository }}
      upstream_sync_branch:
        description: "上游同步分支"
        required: true
        type: string
      sync_test_mode: # Adds a boolean option that appears during manual workflow run for easy test mode config
        description: 'Fork Sync Test Mode'
        type: boolean
        default: false

jobs:
  sync_latest_from_upstream:
    runs-on: ubuntu-latest
    name: Sync latest commits from upstream repo

    steps:
      # REQUIRED step
      # Step 1: run a standard checkout action, provided by github
      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.target_sync_repo }}
          fetch-depth: 0
          token: ${{ secrets.TOEKN_FOREVER_FULL_WRITE }} # 使用具有完全写入权限的 TOKEN（必须包含 workflows ）
          # REQUIRED if your upstream repo is private (see wiki), 启用会造成 check-branch-exists 失败
          # persist-credentials: false

      - name: Set up Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git remote add upstream https://github.com/${{ inputs.upstream_sync_repo }}.git

      - name: Check if target_sync_branch exists in the remote
        id: check-branch-exists
        run: |
          # 创建一个临时分支来fetch远程分支的内容
          git fetch upstream ${{ inputs.upstream_sync_branch }}:temp_${{ inputs.upstream_sync_branch }}
          git checkout temp_${{ inputs.upstream_sync_branch }}
          # 强制删除本地分支 并忽略报错（如果分支不存在）
          git branch -D ${{ inputs.target_sync_branch }} || true
          git branch ${{ inputs.target_sync_branch }} temp_${{ inputs.upstream_sync_branch }}  # 创建新分支
          # 强制推送新分支到远程仓库
          git push --force origin ${{ inputs.target_sync_branch }}
